/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package JuegoGrafico;
import JuegoCodigo.Code;
import JuegoCodigo.PanelTablero;
import Conexion.Cliente;
import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.ArrayList;
/**
 *
 * @author manue
 */
public class Juego extends javax.swing.JPanel {
    public static String jugadorAle=new String();//variable que guarda el jugador que se genero de forma aleatoria
    public static Code MJ=new Code();//objeto para mandar a llamar metodo de mostrar jugador, lo hacemos de acceso publico para no batallar
    private Cliente cliente;
    private List<String> tablero;
    private List<JButton> botonesPersonajes = new ArrayList<>();

    public Juego(boolean esHost) {
        initComponents();
        conectarAServidor(esHost);
        if (esHost) {
            tablaorigin();
        } else {
            tablarepite();
        }
    }

    private void conectarAServidor(boolean esHost) {
        try {
            cliente = new Cliente("localhost", 12345, this);
            tablero = cliente.getTablero();
            generarTableroGrafico();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al conectar: " + e.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void generarTableroGrafico() {
        JPanel panelBotones = new JPanel(new GridLayout(6, 4, 5, 5));
        
        for (String personaje : tablero) {
            JButton boton = crearBotonPersonaje(personaje);
            panelBotones.add(boton);
            botonesPersonajes.add(boton);
        }
        
        this.add(panelBotones, BorderLayout.CENTER);
        actualizarEstadoBotones();
    }
    
    public void actualizarEstadoBotones() {
        boolean habilitar = cliente != null && cliente.esMiTurno();
        for (JButton boton : botonesPersonajes) {
            boton.setEnabled(habilitar);
        }
    }

    private JButton crearBotonPersonaje(String personaje) {
        JButton boton = new JButton(personaje);
        boton.addActionListener(e -> {
            if (cliente.esMiTurno()) {
                cliente.enviarPregunta("¿Tu personaje es " + personaje + "?");
                // Lógica adicional al hacer pregunta
            }
        });
        return boton;
    }

    public void actualizarEstadoTurno(boolean miTurno) {
        SwingUtilities.invokeLater(() -> {
            for (JButton boton : botonesPersonajes) {
                boton.setEnabled(miTurno);
            }
            // Cambiar color para indicar turno
            Color colorFondo = miTurno ? new Color(200, 255, 200) : new Color(255, 200, 200);
            this.setBackground(colorFondo);
        });
    }
       
    
    public void tablaorigin(){//funcion para imprimir el primer tablero y que se genere todo
        
        // Cargar imágenes y llenar el tablero
        Code code = new Code();
        code.cargarImagenes();
        code.llenarVector();

        // Crear panel del tablero con las 24 imágenes
        PanelTablero tablero = new PanelTablero();
        tablero.PTSelec(Code.imagenestablero);//Se llama al PTSelec el cual imprime acomoda el panel del tablero de seleccion
        
        

        // Establecer el layout principal del JFrame
        this.setLayout(new java.awt.BorderLayout());

        // Crear un panel auxiliar para alinear el tablero al centro
        JPanel surIzquierda = new JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        surIzquierda.add(tablero);

        // Agregar el panel auxiliar al SUR del BorderLayout
        this.add(surIzquierda, java.awt.BorderLayout.SOUTH);
    }
    
    public void tablarepite(){//Funcion para imprimir la tabla sin que se sorteen los jugadores de nuevo y solo se imprima la tabla como ya estaba
        PanelTablero tablero = new PanelTablero();
        tablero.PTJuego(Code.imagenestablero);        
        

        // Establecer el layout principal del JFrame
        this.setLayout(new java.awt.BorderLayout());

        // Crear un panel auxiliar para alinear el tablero a la izquierda
        JPanel surIzquierda = new JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        surIzquierda.add(tablero);

        // Agregar el panel auxiliar al SUR del BorderLayout
        this.add(surIzquierda, java.awt.BorderLayout.SOUTH);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 975, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 641, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
